# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils.conf_typed as module_0
import scrapy.settings as module_1
import scrapy.exceptions as module_2
import scrapy.utils.deprecate as module_3


def test_case_0():
    list_0 = []
    list_1 = module_0.build_component_list(list_0, list_0)


def test_case_1():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "-tO"
    none_type_0 = module_0.init_env()
    list_0 = [str_0]
    module_0.arglist_to_dict(list_0)


def test_case_3():
    list_0 = []
    dict_0 = module_0.arglist_to_dict(list_0)
    list_1 = module_0.build_component_list(dict_0, dict_0)


def test_case_4():
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""


def test_case_5():
    none_type_0 = module_0.init_env()


def test_case_6():
    config_parser_0 = module_0.get_config()
    assert (
        f"{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(config_parser_0) == 1


def test_case_7():
    bool_0 = False
    list_0 = module_0.get_sources(bool_0)
    base_settings_0 = module_1.BaseSettings(bool_0)
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, list_0)


def test_case_8():
    dict_0 = {}
    list_0 = module_0.build_component_list(dict_0, dict_0)


def test_case_9():
    list_0 = module_0.get_sources()
    none_type_0 = None
    none_type_1 = module_0.init_env(none_type_0)
    base_settings_0 = module_1.BaseSettings()
    list_1 = module_0.build_component_list(none_type_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    config_parser_0 = module_0.get_config()
    assert (
        f"{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(config_parser_0) == 1
    module_0.build_component_list(config_parser_0)


def test_case_11():
    none_type_0 = module_0.init_env()
    none_type_1 = module_0.init_env()
    bool_0 = False
    config_parser_0 = module_0.get_config(bool_0)
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    int_0 = -4631
    dict_0 = {
        int_0: none_type_0,
        str_0: int_0,
        none_type_0: none_type_0,
        int_0: none_type_1,
    }
    list_0 = module_0.build_component_list(dict_0, dict_0)


def test_case_12():
    none_type_0 = None
    base_settings_0 = module_1.BaseSettings(none_type_0)
    int_0 = base_settings_0.__len__()
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    var_0 = base_settings_0.__setitem__(int_0, int_0)
    list_0 = module_0.build_component_list(base_settings_0)


def test_case_13():
    none_type_0 = None
    base_settings_0 = module_1.BaseSettings(none_type_0)
    var_0 = base_settings_0.__setitem__(none_type_0, none_type_0)
    list_0 = module_0.build_component_list(base_settings_0)


def test_case_14():
    none_type_0 = module_0.init_env()
    str_0 = module_0.closest_scrapy_cfg(prevpath=none_type_0)
    assert str_0 == ""
    base_settings_0 = module_1.BaseSettings()
    list_0 = module_0.build_component_list(base_settings_0)


def test_case_15():
    none_type_0 = module_0.init_env()
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    list_0 = []
    dict_0 = module_0.arglist_to_dict(list_0)
    dict_1 = module_0.feed_complete_default_values_from_settings(
        dict_0, base_settings_0
    )
    list_1 = module_0.build_component_list(base_settings_0)
    dict_2 = module_0.feed_process_params_from_cli(base_settings_0, list_0, none_type_1)


def test_case_16():
    none_type_0 = module_0.init_env()
    base_settings_0 = module_1.BaseSettings(none_type_0)
    dict_0 = module_0.arglist_to_dict(base_settings_0)
    dict_1 = module_0.feed_complete_default_values_from_settings(
        dict_0, base_settings_0
    )


def test_case_17():
    none_type_0 = module_0.init_env()
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    list_0 = module_0.get_sources(str_0)
    base_settings_0 = module_1.BaseSettings(none_type_0)
    list_1 = []
    dict_0 = module_0.arglist_to_dict(list_1)
    list_2 = module_0.build_component_list(dict_0, dict_0)
    dict_1 = module_0.feed_complete_default_values_from_settings(
        dict_0, base_settings_0
    )
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, dict_0, list_0)


def test_case_18():
    none_type_0 = module_0.init_env()
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    list_0 = []
    dict_0 = module_0.arglist_to_dict(list_0)
    dict_1 = module_0.feed_complete_default_values_from_settings(
        dict_0, base_settings_0
    )
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, list_0, str_0, dict_1)


def test_case_19():
    str_0 = "Y"
    none_type_0 = module_0.init_env(str_0)
    bool_0 = False
    list_0 = module_0.get_sources(bool_0)
    str_1 = module_0.closest_scrapy_cfg(prevpath=none_type_0)
    assert str_1 == ""
    str_2 = module_0.closest_scrapy_cfg()
    assert str_2 == ""
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    list_1 = []
    dict_0 = module_0.arglist_to_dict(list_1)
    list_2 = module_0.build_component_list(base_settings_0, none_type_0)
    str_3 = ")SHZVlEt5L6.Xh"
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, list_1, str_3, list_0)


def test_case_20():
    str_0 = "Y"
    none_type_0 = module_0.init_env(str_0)
    bool_0 = False
    list_0 = module_0.get_sources(bool_0)
    str_1 = module_0.closest_scrapy_cfg()
    assert str_1 == ""
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    list_1 = []
    dict_0 = module_0.arglist_to_dict(list_1)
    config_parser_0 = module_0.get_config()
    list_2 = module_0.build_component_list(dict_0, dict_0)
    int_0 = -1764
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(
            base_settings_0, list_0, overwrite_output=int_0
        )


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = module_0.init_env()
    bool_0 = False
    list_0 = module_0.get_sources(bool_0)
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    list_1 = []
    var_0 = base_settings_0.get(str_0)
    list_2 = [var_0, list_1, bool_0, base_settings_0]
    module_0.feed_process_params_from_cli(
        base_settings_0, list_2, overwrite_output=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = module_0.init_env()
    config_parser_0 = module_0.get_config()
    str_0 = module_0.closest_scrapy_cfg()
    assert str_0 == ""
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    int_0 = base_settings_0.__len__()
    list_0 = []
    dict_0 = module_0.feed_process_params_from_cli(base_settings_0, list_0, none_type_1)
    var_0 = module_3.update_classpath(config_parser_0)
    dict_1 = module_0.arglist_to_dict(list_0)
    list_1 = module_0.build_component_list(dict_1, dict_1)
    dict_2 = module_0.feed_complete_default_values_from_settings(
        dict_1, base_settings_0
    )
    str_1 = module_0.closest_scrapy_cfg(prevpath=none_type_0)
    assert str_1 == ""
    var_1 = base_settings_0.__setitem__(int_0, int_0)
    list_2 = module_0.build_component_list(base_settings_0)
    module_0.feed_process_params_from_cli(
        base_settings_0, base_settings_0, base_settings_0, list_0
    )


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = module_0.init_env()
    config_parser_0 = module_0.get_config()
    var_0 = module_3.update_classpath(none_type_0)
    none_type_1 = None
    base_settings_0 = module_1.BaseSettings(none_type_1)
    int_0 = base_settings_0.__len__()
    list_0 = []
    dict_0 = base_settings_0.setdefault(none_type_1, priority=none_type_0)
    var_1 = base_settings_0.frozencopy()
    dict_1 = module_0.arglist_to_dict(list_0)
    list_1 = module_0.build_component_list(dict_1, dict_1)
    dict_2 = module_0.feed_complete_default_values_from_settings(
        dict_1, base_settings_0
    )
    var_2 = base_settings_0.__setitem__(int_0, int_0)
    module_0.build_component_list(base_settings_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    config_parser_0 = module_0.get_config()
    assert (
        f"{type(config_parser_0).__module__}.{type(config_parser_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(config_parser_0) == 1
    config_parser_1 = module_0.get_config()
    none_type_0 = None
    base_settings_0 = module_1.BaseSettings(none_type_0)
    int_0 = base_settings_0.__len__()
    list_0 = []
    dict_0 = module_0.feed_process_params_from_cli(base_settings_0, list_0, none_type_0)
    var_0 = base_settings_0.frozencopy()
    var_1 = base_settings_0.__setitem__(none_type_0, config_parser_1)
    str_0 = "p48P)YV"
    str_1 = ""
    str_2 = ""
    list_1 = [str_0, str_1, str_2, str_2]
    module_0.build_component_list(base_settings_0, list_1)
