# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils.conf_untyped as module_0
import scrapy.settings as module_1
import scrapy.exceptions as module_2


def test_case_0():
    dict_0 = {}
    var_0 = module_0.build_component_list(dict_0, dict_0)


def test_case_1():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.build_component_list(base_settings_0, convert=base_settings_0)
    var_1 = module_0.feed_process_params_from_cli(base_settings_0, base_settings_0)


def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.build_component_list(dict_0)
    var_1 = module_0.init_env(var_0)
    var_2 = module_0.get_sources(bool_0)
    var_3 = module_0.build_component_list(var_2, var_2)
    base_settings_0 = module_1.BaseSettings()
    var_4 = module_0.feed_complete_default_values_from_settings(dict_0, base_settings_0)
    var_5 = module_0.arglist_to_dict(base_settings_0)
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.init_env()
    module_0.arglist_to_dict(list_0)


def test_case_4():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.arglist_to_dict(base_settings_0)
    var_1 = module_0.feed_process_params_from_cli(base_settings_0, var_0)


def test_case_5():
    var_0 = module_0.closest_scrapy_cfg()
    assert var_0 == ""


def test_case_6():
    var_0 = module_0.init_env()


def test_case_7():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_0) == 1


def test_case_8():
    str_0 = "@l,#"
    var_0 = module_0.init_env(str_0)
    var_1 = module_0.get_sources(var_0)
    base_settings_0 = module_1.BaseSettings()
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.init_env()
    bool_0 = False
    var_1 = module_0.get_config(bool_0)
    var_2 = var_1.__eq__(var_1)
    var_3 = bool_0.__invert__()
    module_0.build_component_list(var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_0.get_sources()
    bool_0 = False
    var_1 = module_0.build_component_list(var_0, var_0)
    module_0.feed_complete_default_values_from_settings(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    var_0 = module_0.build_component_list(dict_0)
    var_1 = module_0.init_env(var_0)
    base_settings_0 = module_1.BaseSettings(dict_0)
    var_2 = module_0.build_component_list(base_settings_0, base_settings_0)
    base_settings_1 = module_1.BaseSettings()
    var_3 = module_0.build_component_list(base_settings_1)
    var_4 = module_0.feed_complete_default_values_from_settings(dict_0, base_settings_1)
    var_5 = module_0.closest_scrapy_cfg()
    assert var_5 == ""
    var_6 = module_0.feed_process_params_from_cli(base_settings_1, var_3)
    var_7 = base_settings_0.__lt__(base_settings_1)
    var_8 = module_0.get_config()
    var_9 = module_0.arglist_to_dict(base_settings_1)
    module_0.feed_process_params_from_cli(
        base_settings_1, base_settings_0, overwrite_output=var_3
    )


def test_case_12():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.build_component_list(base_settings_0, base_settings_0)


def test_case_13():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.feed_complete_default_values_from_settings(
        base_settings_0, base_settings_0
    )


def test_case_14():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.feed_process_params_from_cli(base_settings_0, base_settings_0)


def test_case_15():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.feed_complete_default_values_from_settings(
        base_settings_0, base_settings_0
    )
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.init_env(dict_0)
    var_1 = module_0.get_config()
    base_settings_0 = module_1.BaseSettings()
    var_2 = module_0.build_component_list(base_settings_0)
    var_3 = module_0.feed_complete_default_values_from_settings(dict_0, base_settings_0)
    var_4 = module_0.feed_process_params_from_cli(base_settings_0, var_2)
    var_5 = var_4.__lt__(base_settings_0)
    module_0.feed_process_params_from_cli(base_settings_0, var_3)


@pytest.mark.xfail(strict=True)
def test_case_17():
    base_settings_0 = module_1.BaseSettings()
    var_0 = module_0.closest_scrapy_cfg()
    assert var_0 == ""
    var_1 = module_0.get_config()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.ConfigParser"
    )
    assert len(var_1) == 1
    module_0.feed_process_params_from_cli(base_settings_0, var_1, var_1)


def test_case_18():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.build_component_list(dict_0)
    var_1 = module_0.get_sources()
    var_2 = module_0.init_env(var_0)
    var_3 = module_0.get_sources(bool_0)
    base_settings_0 = module_1.BaseSettings()
    var_4 = module_0.build_component_list(base_settings_0)
    var_5 = module_0.get_config()
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_3, var_5)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.get_sources(bool_0)
    base_settings_0 = module_1.BaseSettings()
    var_1 = module_0.build_component_list(base_settings_0, dict_0)
    assert len(base_settings_0) == 1
    module_0.feed_complete_default_values_from_settings(dict_0, dict_0)


def test_case_20():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.build_component_list(dict_0)
    var_1 = module_0.init_env(var_0)
    var_2 = module_0.build_component_list(dict_0, dict_0)
    base_settings_0 = module_1.BaseSettings()
    var_3 = module_0.build_component_list(base_settings_0, convert=base_settings_0)
    var_4 = module_0.feed_complete_default_values_from_settings(dict_0, base_settings_0)
    var_5 = var_2.__lt__(base_settings_0)
    var_6 = module_0.arglist_to_dict(base_settings_0)
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(base_settings_0, var_2, bool_0, var_4)


def test_case_21():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.build_component_list(dict_0)
    var_1 = module_0.init_env(var_0)
    var_2 = module_0.get_sources(bool_0)
    var_3 = module_0.build_component_list(var_2, var_2)
    base_settings_0 = module_1.BaseSettings()
    var_4 = module_0.build_component_list(base_settings_0)
    var_5 = module_0.feed_complete_default_values_from_settings(dict_0, base_settings_0)
    var_6 = var_2.__lt__(base_settings_0)
    var_7 = module_0.get_config()
    var_8 = module_0.arglist_to_dict(base_settings_0)
    with pytest.raises(module_2.UsageError):
        module_0.feed_process_params_from_cli(
            base_settings_0, base_settings_0, dict_0, var_5
        )


@pytest.mark.xfail(strict=True)
def test_case_22():
    var_0 = module_0.get_sources()
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_1 = module_0.build_component_list(dict_0)
    var_2 = module_0.init_env(var_1)
    var_3 = module_0.get_sources(bool_0)
    var_4 = module_0.build_component_list(var_3, var_3)
    base_settings_0 = module_1.BaseSettings()
    var_5 = module_0.build_component_list(base_settings_0)
    var_6 = module_0.feed_complete_default_values_from_settings(dict_0, base_settings_0)
    module_0.feed_process_params_from_cli(
        base_settings_0, base_settings_0, overwrite_output=var_1
    )


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.build_component_list(dict_0)
    var_1 = module_0.init_env(var_0)
    var_2 = module_0.get_sources(bool_0)
    var_3 = module_0.build_component_list(var_2, var_2)
    base_settings_0 = module_1.BaseSettings()
    var_4 = base_settings_0.setdefault(var_1, priority=var_1)
    module_0.build_component_list(base_settings_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    int_0 = 1228
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.build_component_list(list_0, list_0)
