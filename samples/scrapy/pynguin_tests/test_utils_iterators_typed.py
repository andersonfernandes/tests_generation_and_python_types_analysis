# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils.iterators_typed as module_0
import scrapy.http.response as module_1


def test_case_0():
    bytes_0 = b"\xe8\x1d\x9f\xf6"
    stream_reader_0 = module_0._StreamReader(bytes_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"


def test_case_1():
    bytes_0 = b"\xf5\x87N\xc0\x9f\xfeT"
    stream_reader_0 = module_0._StreamReader(bytes_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    bool_0 = True
    bytes_1 = stream_reader_0.read(bool_0)
    assert bytes_1 == b"\xf5"


def test_case_2():
    str_0 = ""
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    generator_0 = module_0.csviter(str_0)
    response_0 = module_1.Response(str_0, headers=generator_0, flags=str_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == []
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None
    bytes_0 = stream_reader_0.read()
    assert bytes_0 == b""


def test_case_3():
    str_0 = ""
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    bytes_0 = stream_reader_0.read()
    assert bytes_0 == b""
    generator_0 = module_0.csviter(str_0)
    response_0 = module_1.Response(str_0, headers=generator_0, flags=str_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == []
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None
    bytes_1 = stream_reader_0.read()


def test_case_4():
    str_0 = "\nS>C;4om^'?>[E&"
    generator_0 = module_0.csviter(str_0)
    response_0 = module_1.Response(str_0, headers=generator_0, flags=str_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == [
        "\n",
        "S",
        ">",
        "C",
        ";",
        "4",
        "o",
        "m",
        "^",
        "'",
        "?",
        ">",
        "[",
        "E",
        "&",
    ]
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    str_0 = "nicozvHh"
    generator_0 = module_0.csviter(none_type_0, none_type_0, quotechar=str_0)
    module_1.Response(generator_0, headers=generator_0, body=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"P"
    stream_reader_0 = module_0._StreamReader(bytes_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    generator_0 = module_0.csviter(bytes_0, quotechar=stream_reader_0)
    none_type_0 = None
    module_1.Response(
        none_type_0, headers=generator_0, flags=none_type_0, ip_address=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "&juZ\nZ<9zN"
    generator_0 = module_0.xmliter(str_0, str_0)
    response_0 = module_1.Response(str_0, flags=generator_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == []
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None
    generator_1 = module_0.csviter(response_0, generator_0)
    module_1.Response(
        response_0, str_0, generator_1, flags=response_0, ip_address=response_0
    )


def test_case_8():
    str_0 = "\nS>C;4om^'?>[E&"
    generator_0 = module_0.xmliter(str_0, str_0)
    response_0 = module_1.Response(str_0, headers=generator_0, flags=str_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == [
        "\n",
        "S",
        ">",
        "C",
        ";",
        "4",
        "o",
        "m",
        "^",
        "'",
        "?",
        ">",
        "[",
        "E",
        "&",
    ]
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    str_0 = "nicozvHh"
    generator_0 = module_0.xmliter_lxml(str_0, str_0)
    module_1.Response(none_type_0, headers=generator_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"P"
    generator_0 = module_0.csviter(bytes_0)
    module_1.Response(bytes_0, headers=generator_0, flags=bytes_0, request=generator_0)


def test_case_11():
    str_0 = ""
    generator_0 = module_0.csviter(str_0)
    response_0 = module_1.Response(str_0, headers=generator_0, flags=str_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == []
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    stream_reader_0 = module_0._StreamReader(none_type_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    str_0 = "+P},t mNQPSiHb\\"
    generator_0 = module_0.xmliter_lxml(str_0, str_0, str_0)
    module_1.Response(none_type_0, headers=generator_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "*nW9\rUA\x0cC6\rmYd>Sw7J"
    generator_0 = module_0.csviter(str_0)
    module_1.Response(str_0, headers=generator_0, flags=str_0)


def test_case_14():
    str_0 = "F&ux\n\x0b<k9zN"
    generator_0 = module_0.xmliter(str_0, str_0)
    stream_reader_0 = module_0._StreamReader(str_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    generator_1 = module_0.csviter(str_0, encoding=generator_0)
    response_0 = module_1.Response(str_0, flags=generator_1)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == [{"F&ux": "\x0b<k9zN"}]
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None
    none_type_0 = None
    generator_2 = module_0.csviter(str_0, quotechar=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "hVr&g\n\x0cwW]8N("
    generator_0 = module_0.csviter(str_0)
    module_1.Response(str_0, headers=generator_0, flags=str_0)


def test_case_16():
    str_0 = "\nS>C;4om^'?>[E&"
    generator_0 = module_0.xmliter(str_0, str_0)
    response_0 = module_1.Response(str_0, headers=generator_0, flags=str_0)
    assert (
        f"{type(response_0).__module__}.{type(response_0).__qualname__}"
        == "scrapy.http.response.Response"
    )
    assert (
        f"{type(response_0.headers).__module__}.{type(response_0.headers).__qualname__}"
        == "scrapy.http.headers.Headers"
    )
    assert len(response_0.headers) == 0
    assert response_0.status == 200
    assert response_0.request is None
    assert response_0.flags == [
        "\n",
        "S",
        ">",
        "C",
        ";",
        "4",
        "o",
        "m",
        "^",
        "'",
        "?",
        ">",
        "[",
        "E",
        "&",
    ]
    assert response_0.certificate is None
    assert response_0.ip_address is None
    assert response_0.protocol is None
    stream_reader_0 = module_0._StreamReader(response_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"


@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b"P"
    stream_reader_0 = module_0._StreamReader(bytes_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "utils.iterators_typed._StreamReader"
    )
    assert stream_reader_0.encoding == "utf-8"
    generator_0 = module_0.csviter(bytes_0, headers=bytes_0)
    module_1.Response(
        generator_0, headers=generator_0, body=stream_reader_0, certificate=generator_0
    )
