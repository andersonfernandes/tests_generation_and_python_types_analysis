# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils.iterators_untyped as module_0
import _io as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.xmliter_lxml(none_type_0, none_type_0, none_type_0)


def test_case_1():
    str_0 = "Jxh%3/c/;Po3"
    var_0 = module_0.csviter(str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 1065.50421152502
    var_0 = module_0.csviter(float_0)
    module_1._TextIOBase(*var_0)


def test_case_3():
    str_0 = "Jxh%3/c/;Po3"
    var_0 = module_0.csviter(str_0, encoding=str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "&2z]S\n8,Q1B/L&xe.Tu"
    var_0 = module_0.csviter(str_0, str_0)
    module_1._TextIOBase(*var_0)


def test_case_5():
    str_0 = "z!L\rAeG)"
    var_0 = module_0.xmliter(str_0, str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "z!L\rAeG)"
    var_0 = module_0.csviter(str_0)
    module_1._TextIOBase(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "&2V]S\n8,~1B/L&xe.Tu"
    var_0 = module_0.csviter(str_0, str_0, quotechar=str_0)
    module_1._TextIOBase(*var_0)


def test_case_8():
    str_0 = ""
    var_0 = module_0.csviter(str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


def test_case_9():
    str_0 = "&2V]S\n8,~1B/L&xe.Tu"
    var_0 = module_0.csviter(str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


def test_case_10():
    str_0 = "\t2VS\n~<L.Tu"
    var_0 = module_0.csviter(str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


def test_case_11():
    str_0 = "&2z]S\n8,Q1B/L&xe.Tu"
    var_0 = module_0.csviter(str_0, headers=str_0)
    text_i_o_base_0 = module_1._TextIOBase(*var_0)
    assert (
        f"{type(text_i_o_base_0).__module__}.{type(text_i_o_base_0).__qualname__}"
        == "_io._TextIOBase"
    )


@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b"D\x9b%\x8f]\xe1T\x1f\xed=\xe2\x84-"
    var_0 = module_0.csviter(bytes_0)
    module_1._TextIOBase(*var_0)
