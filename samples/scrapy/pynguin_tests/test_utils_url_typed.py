# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils.url_typed as module_0
import urllib.parse as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.url_is_from_any_domain(bool_0, bool_0)


def test_case_1():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    bool_0 = module_0.url_is_from_any_domain(str_0, str_0)
    assert bool_0 is False


def test_case_2():
    str_0 = "P+"
    bool_0 = module_0.url_has_any_extension(str_0, str_0)
    assert bool_0 is True


def test_case_3():
    str_0 = "P"
    bool_0 = module_0.url_has_any_extension(str_0, str_0)
    assert bool_0 is False


def test_case_4():
    str_0 = "w?"
    str_1 = module_0.escape_ajax(str_0)
    assert str_1 == "w?"


def test_case_5():
    str_0 = ""
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://"


def test_case_6():
    none_type_0 = None
    str_0 = module_0.strip_url(none_type_0)
    assert str_0 == b""


def test_case_7():
    none_type_0 = None
    str_0 = module_0.strip_url(none_type_0, strip_fragment=none_type_0)
    assert str_0 == b""


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.url_is_from_spider(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ":6#`NRVr^XRta{>T<="
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://:6#`NRVr^XRta{>T<="
    parse_result_0 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://:6"
    none_type_0 = None
    bool_0 = module_0.url_is_from_any_domain(str_1, parse_result_0)
    assert bool_0 is True
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "http://:6"
    str_4 = module_0.escape_ajax(str_0)
    assert str_4 == ":6#`NRVr^XRta{>T<="
    str_5 = module_0.guess_scheme(str_2)
    assert str_5 == "http://:6"
    none_type_0.__contains__(str_3, str_2)


def test_case_10():
    str_0 = "x]n\n|GI5=J[|}D`"
    bool_0 = True
    str_1 = module_0.strip_url(str_0, bool_0, origin_only=bool_0)
    assert str_1 == "/"
    str_2 = module_0.guess_scheme(str_0)
    assert str_2 == "http://x]n\n|GI5=J[|}D`"


def test_case_11():
    none_type_0 = None
    str_0 = module_0.strip_url(none_type_0, strip_default_port=none_type_0)
    assert str_0 == b""


def test_case_12():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^XRta{>T<=C"
    parse_result_0 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://A:6"
    parse_result_1 = module_0.parse_url(parse_result_0, str_1)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_1) == 6
    none_type_0 = None
    var_0 = module_1.urldefrag(none_type_0)
    bool_0 = module_0.url_is_from_any_domain(str_1, parse_result_0)
    assert bool_0 is True
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "http://A:6"
    str_4 = module_0.strip_url(str_2, origin_only=parse_result_0)
    assert str_4 == "http://A:6/"


def test_case_13():
    none_type_0 = None
    str_0 = module_0.strip_url(none_type_0, none_type_0)
    assert str_0 == b""


def test_case_14():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^XRta{>T<=C"
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://A:6"
    bool_0 = module_0.url_is_from_any_domain(str_2, str_0)
    assert bool_0 is False


def test_case_15():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^XRta{>T<=C"
    parse_result_0 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://A:6"
    bool_0 = module_0.url_is_from_any_domain(str_2, parse_result_0)
    assert bool_0 is True


def test_case_16():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^XRta{>T<=C"
    parse_result_0 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://A:6"
    none_type_0 = None
    var_0 = module_1.urldefrag(none_type_0)
    bool_0 = module_0.url_is_from_any_domain(str_1, parse_result_0)
    assert bool_0 is True
    str_3 = module_0.escape_ajax(str_2)
    assert str_3 == "http://A:6"
    str_4 = module_0.escape_ajax(str_0)
    assert str_4 == "A:6#`NRVr^XRta{>T<=C"
    str_5 = "-\\i\rO_gd!$"
    str_6 = module_0.strip_url(str_5, none_type_0, origin_only=var_0)
    assert str_6 == "/"


def test_case_17():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^XRta{>T<=C"
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://A:6"


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "GryGM~@\\n;hdG5v"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://GryGM~@\\n;hdG5v"
    parse_result_0 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    parse_result_1 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_1) == 6
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://\\n;hdG5v"
    none_type_0 = None
    var_0 = module_1.urldefrag(none_type_0)
    module_1.urlunparse(none_type_0)


def test_case_19():
    str_0 = "A:6#`NRVr^XRta{>T<=C"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^XRta{>T<=C"
    str_2 = "/ c;o\n^E}aAR;M'"
    str_3 = module_0.guess_scheme(str_2)
    assert str_3 == "file:///%20c%3Bo%0A%5EE%7DaAR%3BM%27"
    parse_result_0 = module_0.parse_url(str_3)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_4 = module_0.strip_url(str_1)
    assert str_4 == "http://A:6"
    none_type_0 = None
    bool_0 = module_0.url_is_from_any_domain(str_2, str_4)
    assert bool_0 is False
    str_5 = module_0.escape_ajax(str_4)
    assert str_5 == "http://A:6"
    str_6 = "\\"
    str_7 = module_0.strip_url(str_6, str_4, none_type_0, str_5)
    assert str_7 == "/"


def test_case_20():
    str_0 = "A:6#`NRVr^@Rta{>T<="
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://A:6#`NRVr^@Rta{>T<="
    str_2 = module_0.guess_scheme(str_0)
    assert str_2 == "http://A:6#`NRVr^@Rta{>T<="
    parse_result_0 = module_0.parse_url(str_2)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    str_3 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_3 == "http://A:6"
    parse_result_1 = module_0.parse_url(str_0)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_1) == 6
    bool_0 = module_0.url_is_from_any_domain(str_3, parse_result_1)
    assert bool_0 is False
    str_4 = module_0.escape_ajax(str_3)
    assert str_4 == "http://A:6"
    bool_1 = module_0.url_is_from_any_domain(str_1, parse_result_0)
    assert bool_1 is True
    str_5 = "Id#!N-uPb vM,;dz17f"
    str_6 = module_0.escape_ajax(str_5)
    assert str_6 == "Id?_escaped_fragment_=N-uPb+vM%2C%3Bdz17f"
    str_7 = module_0.strip_url(str_5, strip_default_port=bool_0)
    assert str_7 == "Id"


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = ":Kv\\@'*P\"zEDwzTqNPa"
    str_1 = module_0.guess_scheme(str_0)
    assert str_1 == "http://:Kv\\@'*P\"zEDwzTqNPa"
    parse_result_0 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_0).__module__}.{type(parse_result_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_0) == 6
    parse_result_1 = module_0.parse_url(str_1)
    assert (
        f"{type(parse_result_1).__module__}.{type(parse_result_1).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(parse_result_1) == 6
    str_2 = module_0.strip_url(str_1, strip_fragment=str_0)
    assert str_2 == "http://'*P\"zEDwzTqNPa"
    none_type_0 = None
    var_0 = module_1.urldefrag(none_type_0)
    bool_0 = module_0.url_is_from_any_domain(str_2, var_0)
    assert bool_0 is False
    str_3 = module_0.escape_ajax(str_0)
    assert str_3 == ":Kv\\@'*P\"zEDwzTqNPa"
    module_0.url_has_any_extension(parse_result_0, var_0)
