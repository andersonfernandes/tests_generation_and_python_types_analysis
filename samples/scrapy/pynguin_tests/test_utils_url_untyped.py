# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils.url_untyped as module_0
import re as module_1
import enum as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0)
    assert var_0 == b""


def test_case_1():
    str_0 = '})n8s"w'
    var_0 = module_0.url_is_from_any_domain(str_0, str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    module_0.url_has_any_extension(set_0, set_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.strip_url(
        none_type_0, none_type_0, origin_only=none_type_0, strip_fragment=none_type_0
    )
    assert var_0 == b""


def test_case_4():
    none_type_0 = None
    var_0 = module_0.strip_url(none_type_0, strip_default_port=none_type_0)
    assert var_0 == b""


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_0.url_is_from_spider(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    module_0.guess_scheme(bool_0)


def test_case_7():
    str_0 = "|sd73i?fvJS\\c'*G<"
    var_0 = module_0.escape_ajax(str_0)
    assert var_0 == "|sd73i?fvJS\\c'*G<"


def test_case_8():
    str_0 = "R*,fyZNP>yb-"
    var_0 = module_0.guess_scheme(str_0)
    assert var_0 == "http://R*,fyZNP>yb-"


def test_case_9():
    set_0 = set()
    var_0 = module_0.strip_url(set_0, set_0, origin_only=set_0)
    assert var_0 == b""


def test_case_10():
    str_0 = "O\\<(\x0c"
    var_0 = module_0.url_has_any_extension(str_0, str_0)
    assert var_0 is True


def test_case_11():
    str_0 = ""
    var_0 = module_0.url_has_any_extension(str_0, str_0)
    assert var_0 is False


def test_case_12():
    str_0 = "R*,fyZNP>yb-"
    var_0 = module_0.strip_url(str_0, strip_fragment=str_0)
    assert var_0 == "R*,fyZNP>yb-"
    var_1 = module_0.escape_ajax(str_0)
    assert var_1 == "R*,fyZNP>yb-"
    var_2 = module_0.guess_scheme(var_0)
    assert var_2 == "http://R*,fyZNP>yb-"
    var_3 = module_0.url_is_from_any_domain(var_2, var_2)
    assert var_3 is False
    var_4 = module_0.parse_url(var_1)
    var_5 = module_0.parse_url(var_1)
    var_6 = module_0.url_has_any_extension(var_5, var_1)


def test_case_13():
    str_0 = "R*,fyZNP>yb-"
    var_0 = module_0.escape_ajax(str_0)
    assert var_0 == "R*,fyZNP>yb-"
    var_1 = module_0.guess_scheme(var_0)
    assert var_1 == "http://R*,fyZNP>yb-"
    var_2 = module_0.url_is_from_any_domain(var_1, str_0)
    assert var_2 is False


def test_case_14():
    str_0 = "R*,fyZNP>yb-"
    var_0 = module_0.strip_url(str_0, strip_fragment=str_0)
    assert var_0 == "R*,fyZNP>yb-"
    var_1 = module_0.escape_ajax(str_0)
    assert var_1 == "R*,fyZNP>yb-"
    var_2 = module_0.guess_scheme(var_0)
    assert var_2 == "http://R*,fyZNP>yb-"
    var_3 = module_0.guess_scheme(var_2)
    assert var_3 == "http://R*,fyZNP>yb-"
    var_4 = module_0.url_is_from_any_domain(str_0, var_1)
    assert var_4 is False


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "})N8sB"
    var_0 = module_0.parse_url(str_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    list_0 = [str_0, str_0, str_0, str_0]
    var_1 = module_0.add_http_if_no_scheme(str_0)
    assert var_1 == "http://})N8sB"
    str_1 = 'Ih"a3$\x0b'
    var_2 = module_1.purge()
    dict_0 = {str_1: list_0}
    var_3 = module_0.url_is_from_any_domain(var_1, list_0)
    assert var_3 is True
    module_2.EnumMeta(*list_0, **dict_0)


def test_case_16():
    str_0 = "R*,fy-ZNP>ybU"
    var_0 = module_0.strip_url(str_0, origin_only=str_0)
    assert var_0 == "/"


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "R*,fyZNP>yb-"
    var_0 = module_0.strip_url(str_0, strip_fragment=str_0)
    assert var_0 == "R*,fyZNP>yb-"
    var_1 = module_0.escape_ajax(str_0)
    assert var_1 == "R*,fyZNP>yb-"
    var_2 = module_0.url_is_from_any_domain(str_0, str_0)
    assert var_2 is False
    var_3 = module_0.strip_url(str_0, var_2, origin_only=var_0)
    assert var_3 == "/"
    var_4 = module_0.parse_url(var_1)
    var_0.__reversed__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "P~IOyFft*U\x0cW9:|@HpM"
    var_0 = module_0.parse_url(str_0, str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "urllib.parse.ParseResult"
    )
    assert len(var_0) == 6
    var_1 = module_0.guess_scheme(str_0)
    assert var_1 == "http://P~IOyFft*U\x0cW9:|@HpM"
    var_2 = module_0.add_http_if_no_scheme(str_0)
    assert var_2 == "http://P~IOyFft*U\x0cW9:|@HpM"
    var_3 = module_0.strip_url(var_2, strip_default_port=var_2)
    assert var_3 == "http://HpM"
    var_4 = module_0.escape_ajax(var_3)
    assert var_4 == "http://HpM"
    var_5 = module_0.url_is_from_any_domain(var_2, str_0)
    assert var_5 is False
    var_0.__repr__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "//---Q#Zqf9|\rgj"
    var_0 = module_0.guess_scheme(str_0)
    assert var_0 == "file:///---Q%23Zqf9%7C%0Dgj"
    var_1 = module_0.add_http_if_no_scheme(str_0)
    assert var_1 == "http://---Q#Zqf9|\rgj"
    var_2 = module_0.url_is_from_any_domain(var_0, str_0)
    assert var_2 is False
    var_3 = module_0.strip_url(var_1, strip_default_port=var_1)
    assert var_3 == "http://---Q"
    dict_0 = {str_0: var_1}
    var_4 = module_0.escape_ajax(var_3)
    assert var_4 == "http://---Q"
    var_5 = module_0.url_is_from_any_domain(var_1, str_0)
    assert var_5 is False
    module_2.EnumMeta(*var_3, **dict_0)
